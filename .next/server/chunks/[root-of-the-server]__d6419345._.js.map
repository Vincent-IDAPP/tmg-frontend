{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///Users/vincentsechi/Documents/dev/Cours/TMG/frontend/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\n\nexport const authOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        username: { label: \"Nom d'utilisateur\", type: \"text\" },\n        password: { label: \"Mot de passe\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        // Appelle ton backend pour vérifier les identifiants\n        const res = await fetch(\"http://localhost/api/login\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            username: credentials.username,\n            password: credentials.password,\n          }),\n        });\n\n        const user = await res.json();\n\n        // Si la réponse est bonne et l'utilisateur est valide, retourne-le\n        if (res.ok && user) {\n          return user; // user doit contenir au minimum un id ou email\n        }\n        // Sinon retourne null => échec de connexion\n        return null;\n      },\n    }),\n  ],\n\n  session: {\n    strategy: \"jwt\",\n  },\n  secret: process.env.JWT_SECRET,\n\n  callbacks: {\n    async jwt({ token, user }) {\n      // Ajoute l’utilisateur au token JWT lors de la connexion\n      if (user) {\n        token.id = user.id;\n        token.email = user.email;\n      }\n      return token;\n    },\n\n    async session({ session, token }) {\n      // Ajoute les données du token à la session accessible côté client\n      if (token) {\n        session.user.id = token.id;\n        session.user.email = token.email;\n      }\n      return session;\n    },\n  },\n\n  pages: {\n    signIn: \"/login\", // Optionnel, page de connexion custom\n  },\n};\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEO,MAAM,cAAc;IACzB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,UAAU;oBAAE,OAAO;oBAAqB,MAAM;gBAAO;gBACrD,UAAU;oBAAE,OAAO;oBAAgB,MAAM;gBAAW;YACtD;YACA,MAAM,WAAU,WAAW;gBACzB,qDAAqD;gBACrD,MAAM,MAAM,MAAM,MAAM,8BAA8B;oBACpD,QAAQ;oBACR,SAAS;wBAAE,gBAAgB;oBAAmB;oBAC9C,MAAM,KAAK,SAAS,CAAC;wBACnB,UAAU,YAAY,QAAQ;wBAC9B,UAAU,YAAY,QAAQ;oBAChC;gBACF;gBAEA,MAAM,OAAO,MAAM,IAAI,IAAI;gBAE3B,mEAAmE;gBACnE,IAAI,IAAI,EAAE,IAAI,MAAM;oBAClB,OAAO,MAAM,+CAA+C;gBAC9D;gBACA,4CAA4C;gBAC5C,OAAO;YACT;QACF;KACD;IAED,SAAS;QACP,UAAU;IACZ;IACA,QAAQ,QAAQ,GAAG,CAAC,UAAU;IAE9B,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,yDAAyD;YACzD,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,KAAK,GAAG,KAAK,KAAK;YAC1B;YACA,OAAO;QACT;QAEA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,kEAAkE;YAClE,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;YAClC;YACA,OAAO;QACT;IACF;IAEA,OAAO;QACL,QAAQ;IACV;AACF;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}